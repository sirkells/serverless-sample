trigger:
- main

# pool:
#   vmImage: 'ubuntu-latest'

# stages:
# - stage: Build
#   jobs:
#   - job: FirstJob
#     steps:
#     - bash: echo $(PipelineLevelVariable)
#     - bash: echo $(Build.BuildNumber)
#     - bash: echo $(Build.BuildId)
#     - bash: echo $(Build.SourceBranchName)
#     - bash: ls -R $(Build.SourcesDirectory)
#     - bash: ls -R $(System.DefaultWorkingDirectory)
#     - bash: ls -R $(Build.ArtifactStagingDirectory)


stages:
- stage: BuildArtifact
  jobs:
  - job: BuildLambdaFunction
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: false
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
        displayName: 'Install Node.js'
      - script: |
          npm install
          npm run build
        workingDirectory: $(System.DefaultWorkingDirectory)/backend
        displayName: 'NPM install, lint, and test'
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/backend/build/'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/rest_api.zip'
          replaceExistingArchive: true
          verbose: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'rest_api'
          publishLocation: 'pipeline'
      

- stage: UploadArtifact
  dependsOn: BuildArtifact
  jobs:
  - job: UploadLambda
    pool:
      vmImage: 'ubuntu-latest'
      continueOnError: false
    steps:
    - task: S3Upload@1
      inputs:
        awsCredentials: 'cicd_credential'
        regionName: 'eu-central-1'
        bucketName: 'sample-project-ka2-backend'
        sourceFolder: '$(Pipeline.Workspace)/rest_api/a/'
        globExpressions: '**'
        targetFolder: '$(Build.BuildId)'
        createBucket: true
      displayName: 'upload Lambda function ZIP build to staging bucket'




# - stage: DevelopmentDeployment
#   dependsOn: Build
#   jobs:
#   - deployment: LambdaDevelopment
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: 'Development'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           # - task: S3Upload@1
#           #   inputs:
#           #     awsCredentials: 'cicd_credential'
#           #     regionName: 'eu-central-1'
#           #     bucketName: 'sample-project-ka2-backend'
#           #     sourceFolder: '$(Pipeline.Workspace)/rest_api/a'
#           #     globExpressions: '**'
#           #     targetFolder: '$(Build.BuildId)'
#           #     createBucket: true
#           #   displayName: 'upload Lambda function ZIP build to staging bucket'
#           # - script: |
#           #     aws s3 cp $(Pipeline.Workspace)/rest_api/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) s3://$(AWS_S3_STAGING_BUCKET_NAME)
#           #     aws s3 cp $(Pipeline.Workspace)/rest_api/a/rest_api.zip s3://$(AWS_S3_STAGING_BUCKET_NAME)
#           #   displayName: 'upload CloudFormation template and Lambda function ZIP build to staging bucket'
#           - script: |
#               aws cloudformation deploy --stack-name $(AWS_STACK_NAME_DEVELOPMENT) --template-file $(Pipeline.Workspace)/rest_api/s/$(AWS_CLOUDFORMATION_TEMPLATE_FILE_NAME) --tags Environment=Development --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
#             displayName: 'updating CloudFormation stack'

# trigger:
# - main

# variables:
#   tag: '$(Build.BuildId)'

# stages:
# - stage: Build_Upload
#   displayName: Build Lambda Zip Files
#   jobs:
#   - job: BuildJob
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - bash: echo building js files
#     - script: npm install
#       workingDirectory: $(System.DefaultWorkingDirectory)/backend
#       displayName: install node packages
#     - script: npm run build
#       workingDirectory: $(System.DefaultWorkingDirectory)/backend
#       displayName: build js files
#     - script: rm -rf node_modules
#       workingDirectory: $(System.DefaultWorkingDirectory)/backend
#       displayName: remove node modules
#     - script: zip -r rest_api.zip ./
#       workingDirectory: $(System.DefaultWorkingDirectory)/backend/build/
#       displayName: archive lambda
#     # - task: ArchiveFiles@2
#     #   inputs:
#     #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/backend/'
#     #     includeRootFolder: false
#     #     archiveType: 'zip'
#     #     archiveFile: 'rest-api.zip'
#     #     replaceExistingArchive: true

#     # - task: S3Upload@1
#     #   inputs:
#     #     awsCredentials: 'cicd_credential'
#     #     regionName: 'eu-central-1'
#     #     bucketName: 'sample-project-ka2-backend'
#     #     sourceFolder: '$(Build.ArtifactStagingDirectory)/rest-api.zip'
#     #     globExpressions: '**'
